syntax = "proto3";

package arbiter;

service Arbiter {
    rpc StartTransaction(StartTransactionRequest) returns (StartTransactionResponse);
    rpc ResourcesAccessed(stream ResourcesAccessedRequest) returns (ResourcesAccessedResponse);
    rpc WaitCommit(WaitCommitRequest) returns (WaitCommitResponse);
    rpc CommitCompleted(CommitCompletedRequest) returns (CommitCompletedResponse);
}

message StartTransactionRequest {
    uint64 tid = 1;
}

message StartTransactionResponse { }

enum Error {
    Ok = 0;
    UnknownTransaction = 1;
    InvalidTransactionState = 2;
    InvalidMessage = 3;
}

message ResourcesAccessedRequest {
    uint64 tid = 1;
    repeated string read_rids = 2;
    repeated string written_rids = 3;
}

message ResourcesAccessedResponse {
    Error error = 1;
    bool can_proceed = 2;
}

message WaitCommitRequest {
    uint64 tid = 1;
}

message WaitCommitResponse {
    Error error = 1;
    enum CommitStatus {
        Proceed = 0;
        Retry = 1;
    }
    CommitStatus status = 2;
}

message CommitCompletedRequest {
    uint64 tid = 1;
}

message CommitCompletedResponse {
    Error error = 1;
}